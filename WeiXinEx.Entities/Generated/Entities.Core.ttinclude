<#@ template debug="true" hostspecific="false" language="C#" #>
<#@ output extension=".cs" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="System.Data"#>
<#@ import namespace="System" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="PetaPoco.Database" #>
<#+
	
	public class Column
	{
		public string ColumnName { get; set;}
		public string PropertyName;
		public string PropertyType;
		public string Remark;
		public bool IsPK;
		public bool IsNullable;
		public bool IsAutoIncrement;
		public bool Ignore;
	}
	public class Table
	{
        
		public string TableName;
		public string Schema;
		public bool IsView;
		public string CleanName;
		public string ClassName;
		public string SequenceName;
		public bool Ignore;

		public List<Column> Columns;
		public Column Primkey
		{
			get
			{
				return Columns.SingleOrDefault(x => x.IsPK);
			}
		}
		public Column this[string columnName]
		{
			get
			{
				return Columns.Single(x => string.Compare(x.ColumnName, columnName, true) == 0);
			}
		}

	}
    public class T4Builder
    {
        public string Schema { get; set; }
        public List<Table> Tables { get; set; }
        private string connectionString;
        
        private const string Schema_SQL = "select database()";
        private const string Table_SQL = "select TABLE_NAME as Name from information_schema.TABLES WHERE TABLE_SCHEMA = '{0}'";
        private const string Column_SQL = "select COLUMN_NAME as Name,COLUMN_COMMENT as Remark,Data_Type as DataType from information_schema.COLUMNS WHERE TABLE_SCHEMA='{0}' and TABLE_NAME = '{1}'";
        public T4Builder(string connectionString)
        {
            this.connectionString = connectionString;
        }

		public void Initialization(){
			InitMySQL();
		}


        private void InitMySQL() {
            //数据库名
            Schema = Scalar(Schema_SQL).ToString();
            //表名
            Tables = Query(string.Format(Table_SQL, Schema), (reader) =>
            {
                return new Table
                {
                    TableName = reader["Name"].ToString(),
                };
            });

            foreach (var table in Tables)
            {
                table.Columns = Query(string.Format(Column_SQL, Schema, table.TableName), (reader) =>
                {
                    return new Column
                    {
                        ColumnName = reader["Name"].ToString(),
                        Remark = reader["Remark"].ToString(),
                        PropertyType = GetPropertyType(reader["DataType"].ToString())
                    };
                });
            }
        }

        private List<T> Query<T>(string sql, Func<MySqlDataReader, T> func)
        {
            List<T> result = new List<T>();
            using (var reader = MySqlHelper.ExecuteReader(connectionString, sql))
                while (reader.Read())
                    result.Add(func(reader));
            return result;
        }

        private object Scalar(string sql)
        {
            return MySqlHelper.ExecuteScalar(connectionString, sql);
        }

        private string GetPropertyType(string dataType)
        {
            switch (dataType)
            {
                case "bigint":
                    return "long";
                case "int":
                    return "int";
                case "smallint":
                    return "short";
                case "guid":
                    return "Guid";
                case "smalldatetime":
                case "date":
                case "datetime":
                case "timestamp":
                    return "DateTime";
                case "time":
                    return "TimeSpan";
                case "float":
                    return "float";
                case "double":
                    return "double";
                case "numeric":
                case "smallmoney":
                case "decimal":
                case "money":
                    return "decimal";
                case "bit":
                case "bool":
                case "boolean":
                    return "bool";
                case "tinyint":
                    return "byte";
                case "image":
                case "binary":
                case "blob":
                case "mediumblob":
                case "longblob":
                case "varbinary":
                    return "byte[]";
            }
            return "string";
        }
    }
#>